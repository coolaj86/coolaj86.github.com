<?xml version='1.0' encoding='UTF-8'?><rss xmlns:atom='http://www.w3.org/2005/Atom' xmlns:openSearch='http://a9.com/-/spec/opensearchrss/1.0/' xmlns:georss='http://www.georss.org/georss' xmlns:thr='http://purl.org/syndication/thread/1.0' version='2.0'><channel><atom:id>tag:blogger.com,1999:blog-5446962</atom:id><lastBuildDate>Sun, 22 Aug 2010 04:43:25 +0000</lastBuildDate><title>CoolAJ86</title><description>Random tidbits</description><link>http://coolaj86.blogspot.com/</link><managingEditor>noreply@blogger.com (CoolAJ86)</managingEditor><generator>Blogger</generator><openSearch:totalResults>18</openSearch:totalResults><openSearch:startIndex>1</openSearch:startIndex><openSearch:itemsPerPage>25</openSearch:itemsPerPage><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-5446962.post-8976446356395410673</guid><pubDate>Thu, 06 May 2010 23:11:00 +0000</pubDate><atom:updated>2010-05-06T17:11:01.832-06:00</atom:updated><title></title><description>&lt;span class="Apple-style-span" style="border-collapse: collapse; color: #500050; font-family: arial, sans-serif; font-size: 13px;"&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="Apple-style-span" style="border-collapse: collapse; color: #500050; font-family: arial, sans-serif; font-size: 13px;"&gt;&lt;div&gt;&lt;blockquote class="gmail_quote" style="border-left-color: rgb(204, 204, 204); border-left-style: solid; border-left-width: 1px; margin-bottom: 0px; margin-left: 0.8ex; margin-right: 0px; margin-top: 0px; padding-left: 1ex;"&gt;My question: how do you organize JavaScript code? How do you add OOP&lt;/blockquote&gt;&lt;blockquote class="gmail_quote" style="border-left-color: rgb(204, 204, 204); border-left-style: solid; border-left-width: 1px; margin-bottom: 0px; margin-left: 0.8ex; margin-right: 0px; margin-top: 0px; padding-left: 1ex;"&gt;features to JavaScript? How do you separate DOM-manipulation from&lt;/blockquote&gt;&lt;blockquote class="gmail_quote" style="border-left-color: rgb(204, 204, 204); border-left-style: solid; border-left-width: 1px; margin-bottom: 0px; margin-left: 0.8ex; margin-right: 0px; margin-top: 0px; padding-left: 1ex;"&gt;business logic in JavaScript?&lt;/blockquote&gt;&lt;/div&gt;&lt;/span&gt;&lt;span class="Apple-style-span" style="border-collapse: collapse; font-family: arial, sans-serif; font-size: 13px;"&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="Apple-style-span" style="border-collapse: collapse; font-family: arial, sans-serif; font-size: 13px;"&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="Apple-style-span" style="border-collapse: collapse; font-family: arial, sans-serif; font-size: 13px;"&gt;&lt;b&gt;Object Oriented, Event and Message Driven, Asynchronous Non-Blocking Programming&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;First, I recommend reading this article by google&amp;nbsp;&lt;a href="http://googletesting.blogspot.com/2009/07/how-to-think-about-oo.html" style="color: #112508;" target="_blank"&gt;How to Think About OO&lt;/a&gt;&amp;nbsp;[1]&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I believe the reason that JavaScript code is less "intuitive" to organize is because, well, we've been trained to program in ways that are less intuitive. Like a Windows user switching to a *nix (Mac or Linux) - the simplicity and elegance of the paradigms of solutions can be hard to wrap your head around at first, even intimidating.&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;JavaScript provides a valuable learning opportunity. It thrusts a different (perhaps more elegant) paradigm on us - that of asynchronous (or event driven) programming as opposed to procedural programming (which we tell ourselves is object-oriented, but if you contrast any OO code you've written with the paradigm discussed in How to Think About OO, you may well find that you're not actually using your objects as objects).&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Normally we want to write procedurally:&lt;/div&gt;&lt;div&gt;&lt;b&gt;friends = Friends.getAll();&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;doStuff(friends);&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;In some other language, such as ruby or python, Friends.getAll() would likely be a&lt;b&gt;synchronous&amp;nbsp;blocking call&lt;/b&gt;&amp;nbsp;to a database which should complete in some matter of&amp;nbsp;&lt;b&gt;fractions of a second&lt;/b&gt;. In past generations of programming we accepted this waste of processor time and such because it wasn't very noticeable and we have had the liberty of scaling out - buying more systems to make up for the loss of availability that we don't even realize we could have.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;However, in JavaScript&amp;nbsp;&lt;b&gt;we don't have the luxury of procedural programming&lt;/b&gt;, nor of scaling up. We have to use the one machine that we have to the maximum value that we can. We don't use synchronous blocking calls because a call to a web service (such as Amazon with which you must perform several iterative queries to get the data you're looking for) could take&amp;nbsp;&lt;b&gt;several seconds&lt;/b&gt;&amp;nbsp;- perhaps 10 or more - before you have the data you want.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;jQuery comes along and makes AJAX and AJAJ (JSON) easy. But then, if you're like me, you&amp;nbsp;find yourself in this&amp;nbsp;&lt;b&gt;tangled web of callbacks&lt;/b&gt;. It becomes less clear how to organize code.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;So now you have something like this:&lt;/div&gt;&lt;div&gt;&lt;b&gt;// Get all Friends&lt;/b&gt;&amp;nbsp;&amp;lt;-- Note that you've lost the ability to create self-documenting code here&lt;/div&gt;&lt;div&gt;&lt;b&gt;$.get('&lt;a href="http://webservice.com/friends" style="color: #112508;" target="_blank"&gt;http://webservice.com/&lt;wbr&gt;&lt;/wbr&gt;friends&lt;/a&gt;' + '?callback=?', function(){&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;// do stuff&lt;/b&gt;&amp;nbsp;&amp;lt;-- and here as well&lt;/div&gt;&lt;div&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&lt;b&gt;...&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;})&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The problem here is that there's more than one type of&amp;nbsp;&lt;b&gt;doStuff()&lt;/b&gt;&amp;nbsp;that you might want to do with your friends. You don't want to make a call to the webservice each time so you might store friends in an html5 datastore or a friends variable in memory.&amp;nbsp;You might choose to halt some execution of your program until you get friends back.&amp;nbsp;&lt;b&gt;&lt;span style="font-weight: normal;"&gt;But then you're&amp;nbsp;&lt;b&gt;synchronous&amp;nbsp;blocking&lt;/b&gt;&amp;nbsp;&lt;wbr&gt;&lt;/wbr&gt;again!&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;span style="font-weight: normal;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;span style="font-weight: normal;"&gt;How do you know when you've already gotten friends? How to you update friends reliably?&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;It would be nice if we could have a&amp;nbsp;&lt;a href="http://www.mikeperham.com/2010/01/27/scalable-ruby-processing-with-eventmachine/" style="color: #112508;" target="_blank"&gt;hybrid of the two&lt;/a&gt;&amp;nbsp;(such as Ruby's Fibers) [2] such that calling an asynchronous function would pause execution of the current code (and thus allow other events to take place during the&amp;nbsp;&lt;b&gt;non-blocking wait&lt;/b&gt;) and then continue with the execution of the code.&lt;/div&gt;&lt;div&gt;&lt;b&gt;friends =&amp;nbsp;$.get('&lt;a href="http://webservice.com/friends" style="color: #112508;" target="_blank"&gt;http://webservice.&lt;wbr&gt;&lt;/wbr&gt;com/friends&lt;/a&gt;')&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;But that's just not possible in javascript as of today.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The solution I see is to treat&amp;nbsp;&lt;b&gt;each object as an application&lt;/b&gt;&amp;nbsp;until itself, with it's own MVC and "&lt;b&gt;pass messages" rather than "call functions"&lt;/b&gt;&amp;nbsp;(something I've learned from ruby).&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Scenario:&lt;/div&gt;&lt;div&gt;I have button in a facebook app which will display the 10 friends with the closest upcoming birthdays.&lt;/div&gt;&lt;div&gt;I'm allowed to cache the urls of pictures of friends as well as profile data for 24 hours.&lt;/div&gt;&lt;div&gt;I must initially get the data from facebook, but I cache it in an html5 data store.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Friends.send( { "message" : "with_birthdays", "conditions" : { "quantity" : "10" }, "present_as" : "#friends_with_birthdays")&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;or perhaps more practically:&lt;/div&gt;&lt;div&gt;Friends.extend({"presenter_&lt;wbr&gt;&lt;/wbr&gt;class_name" : "Template", "message_map" : { "with_birthdays" : "friends_with_birthdays" } })&lt;/div&gt;&lt;div&gt;Friends.with_birthdays({"&lt;wbr&gt;&lt;/wbr&gt;quantity":10})&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;This way the&amp;nbsp;&lt;b&gt;data lives with the object&lt;/b&gt;&amp;nbsp;as described in How to think about OO [1]. The callbacks all take place within the Friends object and the Friends object will send a message to use the "#friends_with_birthdays" template on some hash object - probably with a timestamp as to when the message was received.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;And perhaps by the time that the data is retrieved the user has chosen to view something else. The Presenter (template class) may have some logic to help it decide how to&amp;nbsp;&lt;b&gt;ignore stale messages&lt;/b&gt;&amp;nbsp;or the Friends class may be able to be modified such that at each callback step it c&lt;b&gt;hecks to see if the action has been cancelled&lt;/b&gt;. If it has, it doesn't send the message to the template class at all.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Do you find this to be helpful? I'd appreciate your feedback and ideas, as I'm still trying to figure this out for myself.&lt;/div&gt;&lt;div class="im" style="color: #500050;"&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;AJ ONeal&lt;span class="Apple-style-span" style="color: #0033bb;"&gt;&lt;u&gt;&lt;br /&gt;&lt;/u&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;Recommended Reading / Viewing:&lt;/div&gt;&lt;div&gt;[1] How to think about OO:&amp;nbsp;&lt;a href="http://googletesting.blogspot.com/2009/07/how-to-think-about-oo.html" style="color: #112508;" target="_blank"&gt;http://googletesting.blogspot.&lt;wbr&gt;&lt;/wbr&gt;com/2009/07/how-to-think-&lt;wbr&gt;&lt;/wbr&gt;about-oo.html&lt;/a&gt;&lt;/div&gt;&lt;div&gt;[2]&amp;nbsp;Scalable Ruby Processing with EventMachine:&amp;nbsp;&lt;a href="http://www.mikeperham.com/2010/01/27/scalable-ruby-processing-with-eventmachine/" style="color: #112508;" target="_blank"&gt;http://www.&lt;wbr&gt;&lt;/wbr&gt;mikeperham.com/2010/01/27/&lt;wbr&gt;&lt;/wbr&gt;scalable-ruby-processing-with-&lt;wbr&gt;&lt;/wbr&gt;eventmachine/&lt;/a&gt;&lt;/div&gt;&lt;div&gt;[3] Best Ideas in JavaScript Development:&amp;nbsp;&lt;a href="http://cdn.javascriptmvc.com/videos/2_0/2_0_demo.htm" style="color: #112508;" target="_blank"&gt;http://cdn.&lt;wbr&gt;&lt;/wbr&gt;javascriptmvc.com/videos/2_0/&lt;wbr&gt;&lt;/wbr&gt;2_0_demo.htm&lt;/a&gt;&lt;/div&gt;&lt;div&gt;[4] SproutCore:&amp;nbsp;&lt;a href="http://screencasts.sproutcore.com/" style="color: #112508;" target="_blank"&gt;http://screencasts.sproutcore.&lt;wbr&gt;&lt;/wbr&gt;com/&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5446962-8976446356395410673?l=coolaj86.blogspot.com' alt='' /&gt;&lt;/div&gt;</description><link>http://coolaj86.blogspot.com/2010_05_01_archive.html#8976446356395410673</link><author>noreply@blogger.com (CoolAJ86)</author></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-5446962.post-7624267440799506308</guid><pubDate>Sat, 24 Apr 2010 21:03:00 +0000</pubDate><atom:updated>2010-04-24T15:03:36.109-06:00</atom:updated><title></title><description>I'm in search of a web API framework.&lt;br /&gt;&lt;br /&gt;I'm not interested in building web clients on the server. Why should the client logic reside on the server? That makes no sense.&lt;br /&gt;&lt;br /&gt;FRAPI II&lt;br /&gt;http://getfrapi.com/&lt;br /&gt;&lt;br /&gt;FRAPI is many steps in the right direction, but too limited.&lt;br /&gt;&lt;br /&gt;I want something like PURE for the API where I can define a directive which maps to a data structure.&lt;br /&gt;&lt;br /&gt;One benefit to this is I can provide the developer with a structure quite a bit flatter than the database model (and for that matter, perhaps SQL isn't the premier option for web mashups).&lt;br /&gt;&lt;br /&gt;Another benefit is I can define what's public very easily.&lt;br /&gt;&lt;br /&gt;The solution would be implemented on both the I and the O of I/O. Perhaps some values are not publicly visible, but they are publicly writable (and more commonly the reverse). A directive also provides validation. The hash could map a value's name to the function which validates it.&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5446962-7624267440799506308?l=coolaj86.blogspot.com' alt='' /&gt;&lt;/div&gt;</description><link>http://coolaj86.blogspot.com/2010_04_01_archive.html#7624267440799506308</link><author>noreply@blogger.com (CoolAJ86)</author></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-5446962.post-3839912697403277748</guid><pubDate>Mon, 05 Apr 2010 00:49:00 +0000</pubDate><atom:updated>2010-04-04T18:49:13.810-06:00</atom:updated><title></title><description>LDS General Conference on PodCast&lt;br /&gt;&lt;br /&gt;Open iTunes&lt;br /&gt;Advanced &gt; Subscribe to Podcast&lt;br /&gt;http://feeds.lds.org/LDSGCComplete_eng&lt;br /&gt;Ok&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5446962-3839912697403277748?l=coolaj86.blogspot.com' alt='' /&gt;&lt;/div&gt;</description><link>http://coolaj86.blogspot.com/2010_04_01_archive.html#3839912697403277748</link><author>noreply@blogger.com (CoolAJ86)</author></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-5446962.post-606168721267093296</guid><pubDate>Sun, 14 Mar 2010 18:43:00 +0000</pubDate><atom:updated>2010-04-28T15:34:45.285-06:00</atom:updated><title></title><description>No, really, XML is retarded.&lt;br /&gt;&lt;br /&gt;&lt;a href="http://developer.apple.com/macosx/launchd.html"&gt;http://developer.apple.com/macosx/launchd.html&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://3.bp.blogspot.com/_Hobzfd-C10I/S50q8f1SKEI/AAAAAAAAA2w/9EgL1Xzkg0Y/s1600-h/Screen+shot+2010-03-14+at+12.27.09+PM.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="640" src="http://3.bp.blogspot.com/_Hobzfd-C10I/S50q8f1SKEI/AAAAAAAAA2w/9EgL1Xzkg0Y/s640/Screen+shot+2010-03-14+at+12.27.09+PM.png" width="618" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;This way is better because... ???&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;That said, I don't think that every single program should have it's own psuedo-YAML config syntax. I like YAML, but would prefer that we all standardized on JSON.&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;a href="http://en.wikipedia.org/wiki/Occam%27s_razor"&gt;The simplest solution is the best&lt;/a&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;key =&amp;gt; "string"&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;value =&amp;gt; "string" | {} | []&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;dict | map | hash =&amp;gt; {}&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;array | collection =&amp;gt; []&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;ASSIGN =&amp;gt; :&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;This is what I don't like about XML:&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;It's ambiguous.&lt;/div&gt;Which of the following is most "correct"?&lt;br /&gt;&lt;pre&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&amp;lt;key&gt;KeyName&amp;lt;/key&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&amp;lt;value&amp;gt;Some value&amp;lt;/value&amp;lt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&amp;lt;keyname&gt;Some value&amp;lt;/keyname&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&amp;lt;keyname&gt;&amp;lt;value&gt;Some value&amp;lt;/value&gt;&amp;lt;/keyname&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&amp;lt;keyname value="Some value"&gt;&amp;lt;/keyname&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&amp;lt;keyname value="Some value"&gt;&amp;lt;/keyname&gt;&lt;/div&gt;&lt;/pre&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;It encourages error.&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;It's just more likely that you'll get it wrong in a way that's not apparent at-a-glance.&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&amp;lt;keyname&gt;Some value&amp;lt;keyname&gt;&amp;lt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;It's ugly. Just&amp;nbsp;&lt;i&gt;look&lt;/i&gt;&amp;nbsp;at it. It&amp;nbsp;&lt;i&gt;looks&lt;/i&gt;&amp;nbsp;complicated.&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;It's verbose. Why do you repeat the names of every single key &lt;i&gt;thing&lt;/i&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;Consider a JSON representation:&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;{ "key_name" : "Some value" }&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;Clear.&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;Concise.&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;Correct.&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;Cute.&lt;/div&gt;&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5446962-606168721267093296?l=coolaj86.blogspot.com' alt='' /&gt;&lt;/div&gt;</description><link>http://coolaj86.blogspot.com/2010_03_01_archive.html#606168721267093296</link><author>noreply@blogger.com (CoolAJ86)</author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://3.bp.blogspot.com/_Hobzfd-C10I/S50q8f1SKEI/AAAAAAAAA2w/9EgL1Xzkg0Y/s72-c/Screen+shot+2010-03-14+at+12.27.09+PM.png' height='72' width='72'/></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-5446962.post-6594844251699322633</guid><pubDate>Wed, 17 Feb 2010 04:22:00 +0000</pubDate><atom:updated>2010-02-16T21:22:20.249-07:00</atom:updated><title></title><description>Google is our friend.&lt;br /&gt;&lt;br /&gt;Take a look here:&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://2.bp.blogspot.com/_Hobzfd-C10I/S3ttKq9KXAI/AAAAAAAAA2A/5AFRZmvoVc4/s1600-h/Picture+16.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="400" src="http://2.bp.blogspot.com/_Hobzfd-C10I/S3ttKq9KXAI/AAAAAAAAA2A/5AFRZmvoVc4/s400/Picture+16.png" width="377" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;Notice that Word is at the bottom of the list. &lt;br /&gt;&lt;br /&gt;It could have been 'DOC', 'DOCX', 'Microsoft Word', or anything other than 'XPS' and it would have landed closer to the top.&lt;br /&gt;&lt;br /&gt;I am disappointed that they refer to OpenDocument as OpenOffice though.&lt;br /&gt;I'm a fan of OpenDocument, but I'm not a particular fan of OpenOffice.&lt;br /&gt;It's slow and ugly.&lt;br /&gt;&lt;br /&gt;Back in the days of MS Office 2000 I was a fan of OpenOffice because the menu system - and most especially the help system - I found to be much more intuitive. I still think that their help system is wonderfully easy to use (most of the time), but in light of the ribbon interface of MSO 2007, OOo just doesn't measure up.&lt;br /&gt;&lt;br /&gt;I primarily use google docs, however, so I don't bother with either.&lt;br /&gt;&lt;br /&gt;In the case that I want to make a flier or handout, or anything with graphics, I always use OpenOffice Draw. Both Writer and Word give me far to much trouble when I insert pictures.&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5446962-6594844251699322633?l=coolaj86.blogspot.com' alt='' /&gt;&lt;/div&gt;</description><link>http://coolaj86.blogspot.com/2010_02_01_archive.html#6594844251699322633</link><author>noreply@blogger.com (CoolAJ86)</author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://2.bp.blogspot.com/_Hobzfd-C10I/S3ttKq9KXAI/AAAAAAAAA2A/5AFRZmvoVc4/s72-c/Picture+16.png' height='72' width='72'/></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-5446962.post-4910848981343275848</guid><pubDate>Wed, 17 Feb 2010 03:53:00 +0000</pubDate><atom:updated>2010-02-16T21:09:34.017-07:00</atom:updated><title></title><description>The textbook conspiracy.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;First of all, textbooks are difficult to read. They usually use a glossy paper which is difficult to read in any sort of light due to the glare.&lt;br /&gt;&lt;br /&gt;Second of all, they have 2 inch margins, just for the sake of increasing the size and weight of the book.&lt;br /&gt;&lt;br /&gt;Third of all, they're hard cover and meant to be laid flat on a desk. You can't easily hold them in your hands and read them. This induces excess strain on the neck and makes the glare worse.&lt;br /&gt;&lt;br /&gt;Forth of all, they're too heavy. That's due to problems 2 and 3.&lt;br /&gt;&lt;br /&gt;Fifth of all, they're mistaken. Most textbooks are riddled with anomalies and errors. I think this is done on purpose so that instead of a simple Errata, they can justify the next release. It's also likely that they write them to be outdated as quickly as possible.&lt;br /&gt;&lt;br /&gt;Worst of all, they aren't geared towards students or teachers. The adhere to nearly no principles of technical writing, teaching, nor well understood psychological practices.&lt;br /&gt;&lt;br /&gt;Seventh of all, the numbering systems don't match up. Why is it that the homework for section 3.6 is at the end of the chapter? Why is diagram 3.43 is section 3.7?&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Here's a challenge for you: Take any text book you have to a copy shop. Have them chop the margins off the book and replace the binding with a spiral binding. You've just lost 5 pounds. So much easier to carry, turn pages, use.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;And while I'm on the subject of education: Isn't it interesting that you have to have a teaching certificate to teach in elementary school, yet the majority of college professors don't have formal training in teaching, psychology, or communication? And I'd say about a quarter to a half of them are downright terrible teachers. Only a few are actually qualified to teach.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;It's much easier for a real teacher to teach something that he doesn't know than for an expert to teach something he knows all too well. The wonderful thing about a real teacher is that a teacher can learn anything and teach anything. It's not about being an expert, it's about acquiring information and communicating it in a fluid manner.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Just get home schooled, fall in love with something, get good at it, and do it.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;[Edit &amp; Addition] The worst worst is actually that they're by and large "text" books. "Text" is one of if not &lt;i&gt;the&lt;/i&gt; least effective medium of communication.&lt;br /&gt;&lt;br /&gt;And it's not fair to make a complaint without suggesting a solution. How about small picture books with matte pages that focus on narrow topics.&lt;br /&gt;&lt;br /&gt;Although book machines are a new invention and I think BYU is one of the first (and only) places in the world to have one, I can see them becoming coupled with the internet and mix'n'match blog posts becoming a better form of text book.&lt;br /&gt;&lt;br /&gt;Imagine if you could blog on a subject and get $0.50 every time someone printed it as part of their curriculum?&lt;br /&gt;&lt;br /&gt;P.S. This is why I tend to stay away from blogging. I feel rather strongly about a rather large number of things and once I start a rant, I'm going to finish it...&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5446962-4910848981343275848?l=coolaj86.blogspot.com' alt='' /&gt;&lt;/div&gt;</description><link>http://coolaj86.blogspot.com/2010_02_01_archive.html#4910848981343275848</link><author>noreply@blogger.com (CoolAJ86)</author></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-5446962.post-5490996238534019362</guid><pubDate>Sat, 06 Feb 2010 06:51:00 +0000</pubDate><atom:updated>2010-02-06T00:01:06.507-07:00</atom:updated><title></title><description>I recently discovered that my driving time becomes more enjoyable (and productive) if I listen to Google Tech Talks.&lt;br /&gt;&lt;br /&gt;I was rather fascinated by Go. The idea that the first argument to a function definition should be the object receiving the message just makes sense. Duck typing makes sense. It's a great paradigm.&lt;br /&gt;&lt;br /&gt;Tonight I starting looking at the Getting Started guides on Erlang for the first time. I've been meaning to do it for a while, but I just hadn't. I feel that having had my eyes opened by Python, then Ruby, and then Go have prepared more to more readily understand so many new concepts.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;I see that Yukihiro Matsumoto was definitely right that the way you approach solutions to problems has much to do with your natural language. Certain constructs of human language and grammar are more conducive to certain thinking patterns. Background and culture play a huge part too. I can see that Erlang was written from the perspective of a certain mind-culture.&lt;br /&gt;&lt;br /&gt;Computer science is so awesome...&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;The more I get into this stuff, the more I believe that it is a truly creative and expressive medium - an art more than a science.&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5446962-5490996238534019362?l=coolaj86.blogspot.com' alt='' /&gt;&lt;/div&gt;</description><link>http://coolaj86.blogspot.com/2010_02_01_archive.html#5490996238534019362</link><author>noreply@blogger.com (CoolAJ86)</author></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-5446962.post-8931646844785481139</guid><pubDate>Sat, 06 Feb 2010 06:22:00 +0000</pubDate><atom:updated>2010-02-05T23:34:56.630-07:00</atom:updated><title></title><description>I'm still putting together a toolkit for myself to be using on web development. I've been missing a good MVC framework for javascript. Just recently I stumbled upon several interesting projects in development.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;I discovered Jaxer a long while ago (perhaps even during the beta stages). Although I'd prefer to use that than PHP, I think that the number of libraries available for Ruby make Ruby a better choice.&lt;br /&gt;&lt;br /&gt;More importantly, mixing client logic and server logic is something that just doesn't sit well with me. I'm of the opinion that clients and servers should be separate. I just don't see how you could adequately follow the data-service paradigm while mixing client/server logic. I'd rather use my own public api and know that it works for everything a customer would need (including a working demonstration - the application itself) than have the convenience of coding things just once.&lt;br /&gt;&lt;br /&gt;http://activerecordjs.org/view.html&lt;br /&gt;&lt;br /&gt;http://code.quirkey.com/sammy/&lt;br /&gt;&lt;br /&gt;http://code.google.com/p/jquery-jstore/&lt;br /&gt;&lt;br /&gt;http://benalman.com/projects/jquery-bbq-plugin/&lt;br /&gt;&lt;br /&gt;http://helma.org/wiki/Helma+NG/&lt;br /&gt;&lt;br /&gt;I still want to do more research into CouchDB before I settle on which frameworks to mix and match from.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;I also want to look into Sinatra and DataMapper.&lt;br /&gt;&lt;br /&gt;http://datamapper.org/why.html&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5446962-8931646844785481139?l=coolaj86.blogspot.com' alt='' /&gt;&lt;/div&gt;</description><link>http://coolaj86.blogspot.com/2010_02_01_archive.html#8931646844785481139</link><author>noreply@blogger.com (CoolAJ86)</author></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-5446962.post-8423160945713029043</guid><pubDate>Sat, 06 Feb 2010 00:50:00 +0000</pubDate><atom:updated>2010-02-05T17:50:30.481-07:00</atom:updated><title></title><description>There are a bunch of websites that BYU's IT college likes to pretend are private for some sort of reason.&lt;br /&gt;&lt;br /&gt;I'm here to dispel that myth and make it so that next time I google BYU XXX I either hit the site itself or this blog post...&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;A lot of the IT sites... under ET... wth?&lt;br /&gt;&lt;a href="http://www.et.byu.edu/groups/"&gt;http://www.et.byu.edu/groups/&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;IT347&lt;br /&gt;http://www.et.byu.edu/groups/it347/IT347Root.htm&lt;br /&gt;http://www.et.byu.edu/groups/it347/Schedule.htm&lt;br /&gt;&lt;br /&gt;IT355&lt;br /&gt;http://www.et.byu.edu/groups/it355/&lt;br /&gt;&lt;br /&gt;IT210&lt;br /&gt;http://www.et.byu.edu/groups/it210web/&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;because it when you're trying to google to find a class because you can't remember the URL, but it's not there.&lt;br /&gt;&lt;br /&gt;P.S. frames suck too, don't use them.&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5446962-8423160945713029043?l=coolaj86.blogspot.com' alt='' /&gt;&lt;/div&gt;</description><link>http://coolaj86.blogspot.com/2010_02_01_archive.html#8423160945713029043</link><author>noreply@blogger.com (CoolAJ86)</author></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-5446962.post-8318457947703864552</guid><pubDate>Fri, 22 Jan 2010 22:43:00 +0000</pubDate><atom:updated>2010-01-22T15:43:37.863-07:00</atom:updated><title></title><description>Attention Apple: Steal this Idea&lt;div&gt;(I don't have the time to write my own right now)&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The biggest hugest most absurdly annoying flaw with the iPod / iPhone / iTouch is that there's no way to edit playlists while you're listening to the music -- that being the time that you're listening to it.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;You don't always know what song you want until you're listening to music and you want it.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Solution:&lt;/div&gt;&lt;div&gt;Keep the entire iTunes household music catalog on the iPod. Allow me to choose "Add this Song at next Sync" or "Remove this Song at next Sync (or right now)"&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Allow the playlists to be editable and to include songs from the catalog even if they aren't currently on the iPod. That way I can build a playlist on the go and push the playlist to my computer.&lt;/div&gt;&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5446962-8318457947703864552?l=coolaj86.blogspot.com' alt='' /&gt;&lt;/div&gt;</description><link>http://coolaj86.blogspot.com/2010_01_01_archive.html#8318457947703864552</link><author>noreply@blogger.com (CoolAJ86)</author></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-5446962.post-5223133334395634086</guid><pubDate>Sat, 26 Dec 2009 03:55:00 +0000</pubDate><atom:updated>2009-12-25T21:18:59.089-07:00</atom:updated><title></title><description>&lt;span class="Apple-style-span" style="font-size: xx-large;"&gt;Import Verizon Contacts to Google Voice using Backup Assistant.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="Apple-style-span" style="font-size: x-large;"&gt;Get Backup Assistant&lt;/span&gt;&lt;br /&gt;&lt;span class="Apple-style-span" style="font-family: arial, sans-serif; font-size: 12px; line-height: 13px;"&gt;&lt;/span&gt;&lt;br /&gt;&lt;ol style="font-family: arial, sans-serif;"&gt;&lt;li style="font-family: arial, sans-serif; padding-bottom: 5px;"&gt;Select&amp;nbsp;&lt;strong style="font-family: arial, sans-serif;"&gt;Get GOING&lt;/strong&gt;&amp;nbsp;or&amp;nbsp;&lt;strong style="font-family: arial, sans-serif;"&gt;Media Center&lt;/strong&gt;&amp;nbsp;(some newer phones go to Tools On The Go or Browse and Download.)&lt;/li&gt;&lt;li style="font-family: arial, sans-serif; padding-bottom: 5px;"&gt;Select&amp;nbsp;&lt;strong style="font-family: arial, sans-serif;"&gt;Business/&lt;/strong&gt;&lt;strong style="font-family: arial, sans-serif;"&gt;Tools&lt;/strong&gt;.&lt;/li&gt;&lt;li style="font-family: arial, sans-serif; padding-bottom: 5px;"&gt;Find&amp;nbsp;&lt;strong style="font-family: arial, sans-serif;"&gt;Backup Assistant&lt;/strong&gt;.&lt;/li&gt;&lt;li style="font-family: arial, sans-serif; padding-bottom: 5px;"&gt;Download it to your phone.&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;as per http://support.vzw.com/faqs/Get%20It%20Now/faq_backupassistant.html#item2&lt;br /&gt;You may have to subscribe to it for $1.99, you may get it for free. Either way, &amp;nbsp;do it! You can cancel it tomorrow. You only need it once.&lt;br /&gt;&lt;br /&gt;&lt;span class="Apple-style-span" style="font-size: x-large;"&gt;Get your contacts in CSV&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;ol&gt;&lt;li&gt;Let BA sync at least once&lt;br /&gt;(should happen when you install it. If not, it happens twice a day)&lt;/li&gt;&lt;li&gt;Login to http://www.verizon.com&lt;/li&gt;&lt;li&gt;My Services (top right)&lt;/li&gt;&lt;li&gt;My Contacts (middle left)&lt;/li&gt;&lt;li&gt;Export to CSV (middle right next to contact search bar)&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;&lt;span class="Apple-style-span" style="font-size: x-large;"&gt;Import to Google Voice&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;ol&gt;&lt;li&gt;Login to Google Voice&lt;/li&gt;&lt;li&gt;Contacts (middle left)&lt;/li&gt;&lt;li&gt;Import (upper right)&lt;/li&gt;&lt;li&gt;Select the CSV (no modifications necessary)&lt;/li&gt;&lt;li&gt;My Contacts (upper middle)&lt;/li&gt;&lt;li&gt;Find Duplicates (lower middle right)&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;div&gt;Now you're done!&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Notify all of your friends that you're using GV and give them your new number.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span class="Apple-style-span" style="font-size: x-large;"&gt;(406) XXX-XXXX What?&lt;/span&gt;&lt;/div&gt;&lt;div&gt;Google uses a scoped 406 number for each of your contacts.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Have a friend text you and notice that you get two numbers: one is google's 406 id for that person in your contact list. The other is their number.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;What that means is that you can call or sms (text) the person from any of your Google Voice registered phones with that 406 number, but not from someone else's phone. Use this as the Mobile 2 number for your contacts and when you call them on Mobile 2 your GV number will appear on their caller ID.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;P.S. I may be lying about the scoped number, I made that part up. I don't have any research to back it up, but it makes sense so I assume it's true until someone tells me otherwise.&lt;/div&gt;&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5446962-5223133334395634086?l=coolaj86.blogspot.com' alt='' /&gt;&lt;/div&gt;</description><link>http://coolaj86.blogspot.com/2009_12_01_archive.html#5223133334395634086</link><author>noreply@blogger.com (CoolAJ86)</author></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-5446962.post-9115612866206261374</guid><pubDate>Fri, 18 Dec 2009 16:30:00 +0000</pubDate><atom:updated>2009-12-18T09:30:52.024-07:00</atom:updated><title></title><description>&lt;span class="Apple-style-span" style="font-size: xx-large;"&gt;How to tell if something is broken.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;A few days ago I DJed for a church dance. I had taken my router hoping that I'd be able to create or bridge or whatever an internet connection so that I could download music on the fly (good idea).&lt;br /&gt;&lt;br /&gt;It all worked out well, but when I got home and tried plugging it back in it didn't seem to be getting a connection, I swapped the cable with a different one and then it began to function.&lt;br /&gt;&lt;br /&gt;Last night I was cleaning up my computer desk area and trying to decide if the cable was broken. Since I've had a problem with it once before (though it was working for several months straight this time) I decided to cut it in half and throw it away.&lt;br /&gt;&lt;br /&gt;&lt;span class="Apple-style-span" style="font-size: x-large;"&gt;That's right. If you're not sure if something is broken, the sure-fire way to know is to break it.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;You see, the most important thing isn't actually to use or keep the thing in question, it's just to know whether or not it needs to be thrown away. Once it's broken, it's want to be tossed.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"&gt;I do this with lots of things actually. I find it's the best way to keep myself clutter free. It also help prevent that OCD obsession with not throwing something away which works (even if it's worthless or impractical).&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;Once I decide I don't need a piece of paper I rip it. Once I don't need a CD I break it in half. When I find something that I'm not sure what to do with and it's not worth giving away, I break it. If I'm not sure if it's broken and it's not worth much, I break it.&lt;br /&gt;&lt;br /&gt;Occasionally I regret my action a moment or so after, but then another moment goes by and I realize that it's better this way.&lt;br /&gt;&lt;br /&gt;&lt;span class="Apple-style-span" style="font-size: x-large;"&gt;After all, the more stuff you own, the more stuff owns you.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;P.S. I didn't follow through on my decision entirely, I was actually feeling to lazy to cut the cable at the time, so I simply threw it away, but that's what I would have done normally.&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5446962-9115612866206261374?l=coolaj86.blogspot.com' alt='' /&gt;&lt;/div&gt;</description><link>http://coolaj86.blogspot.com/2009_12_01_archive.html#9115612866206261374</link><author>noreply@blogger.com (CoolAJ86)</author></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-5446962.post-7209874708276611715</guid><pubDate>Tue, 15 Dec 2009 07:34:00 +0000</pubDate><atom:updated>2009-12-15T00:34:09.435-07:00</atom:updated><title></title><description>&lt;span class="Apple-style-span" style="font-size: x-large;"&gt;Identify the problem.&lt;/span&gt;&lt;br /&gt;&lt;span class="Apple-style-span" style="font-size: x-large;"&gt;Determine the the ideal solution.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Tonight a friend of mine and I were studying for a test and going off on tangents of our religious beliefs about software design. Incidentally we touched on a great life lesson.&lt;br /&gt;&lt;br /&gt;Identify the problem. Determine the ideal solution.&lt;br /&gt;&lt;br /&gt;Too often we (especially in the student world where the professors want to fill our heads with theories rather than teach us how to get ahead in life) start from the bottom up - designing code having an idea of the functions we're going to fulfill, but not really grasping the problem holistically. Then by the time we get around to creating the user interface we have a bunch of code that isn't convenient to use.&lt;br /&gt;&lt;br /&gt;Too often in the database class I TA for I find that the students have been so focused on creating the database tables (perceived practical end result) that they never consider the actual use and viewing of the application and data (actual practical end result).&lt;br /&gt;&lt;br /&gt;If you start by identifying the problem and then drawing out what the ideal solution looks like and what the ideal workflow is (also considering the occasional workflows such as monthly reports or emergency procedures), then you know what interface to provide to the lower level code and which functions will be most useful to create and how to group them.&lt;br /&gt;&lt;br /&gt;Life is similar. If you jump to a practical or immediate solution because that's what you're familiar with or because you think that an ideal solution would be somehow impractical then you're short-selling yourself. Once you identify what the ideal solution is you may in fact find that it takes less effort to create than a more "practical" solution.&lt;br /&gt;&lt;br /&gt;Elegant.&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5446962-7209874708276611715?l=coolaj86.blogspot.com' alt='' /&gt;&lt;/div&gt;</description><link>http://coolaj86.blogspot.com/2009_12_01_archive.html#7209874708276611715</link><author>noreply@blogger.com (CoolAJ86)</author></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-5446962.post-8451969102412132018</guid><pubDate>Wed, 30 Sep 2009 00:34:00 +0000</pubDate><atom:updated>2009-09-29T18:34:45.955-06:00</atom:updated><title></title><description>The Omega Patent.&lt;br /&gt;&lt;br /&gt;I was so inspired by Blackboard's patent on transmitting educational information between computers that today I submitted my own patent on a system called 'Intelligence'.&lt;br /&gt;&lt;br /&gt;For the layman the description of my patent is essential this:&lt;br /&gt;"The process by which a thing is made better or worse or different."&lt;br /&gt;&lt;br /&gt;And for those of you that are better with pictures, here's an example.&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://2.bp.blogspot.com/_Hobzfd-C10I/SsKmofZgqII/AAAAAAAAAw4/epabUxYUdTk/s1600-h/intelligence.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://2.bp.blogspot.com/_Hobzfd-C10I/SsKmofZgqII/AAAAAAAAAw4/epabUxYUdTk/s320/intelligence.png" /&gt;&lt;/a&gt;&lt;br /&gt;&lt;/div&gt;Notice how the graphical example I provided is different from the sentence above, but demonstrates the same information - yet another demonstration of my patented system.&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5446962-8451969102412132018?l=coolaj86.blogspot.com' alt='' /&gt;&lt;/div&gt;</description><link>http://coolaj86.blogspot.com/2009_09_01_archive.html#8451969102412132018</link><author>noreply@blogger.com (CoolAJ86)</author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://2.bp.blogspot.com/_Hobzfd-C10I/SsKmofZgqII/AAAAAAAAAw4/epabUxYUdTk/s72-c/intelligence.png' height='72' width='72'/></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-5446962.post-2375585846545996827</guid><pubDate>Wed, 16 Sep 2009 20:07:00 +0000</pubDate><atom:updated>2009-09-16T14:07:33.850-06:00</atom:updated><title></title><description>Unsubscribe&lt;br /&gt;&lt;br /&gt;What if there were a website free for all peoples and marketers alike (marketers not being a strict subset of people) that established a free service for unsubscribing from spam...&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5446962-2375585846545996827?l=coolaj86.blogspot.com' alt='' /&gt;&lt;/div&gt;</description><link>http://coolaj86.blogspot.com/2009_09_01_archive.html#2375585846545996827</link><author>noreply@blogger.com (CoolAJ86)</author></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-5446962.post-2648258071971620601</guid><pubDate>Thu, 10 Sep 2009 22:22:00 +0000</pubDate><atom:updated>2009-09-10T16:22:52.422-06:00</atom:updated><title></title><description>There's a reason that I can't pick a major and stick with it.&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Computer Science is a major for people who think so much that they never get around to doing anything. Information Technology is for kids who never outgrew video games and want an excuse to have the best gaming system known to mankind in their homes, and also enough money to buy it.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I'm more in the first category; I don't even play video games.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;If there were a major in between those two that had an emphasis on design and interaction, that's what I would major in.&lt;/div&gt;&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5446962-2648258071971620601?l=coolaj86.blogspot.com' alt='' /&gt;&lt;/div&gt;</description><link>http://coolaj86.blogspot.com/2009_09_01_archive.html#2648258071971620601</link><author>noreply@blogger.com (CoolAJ86)</author></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-5446962.post-3114417308474294658</guid><pubDate>Tue, 21 Jul 2009 05:17:00 +0000</pubDate><atom:updated>2009-07-20T23:26:46.722-06:00</atom:updated><title></title><description>Micro Applications - That's what I'm dubbing them at least.&lt;br /&gt;&lt;br /&gt;Apple hit on to something big with the iTunes store.&lt;br /&gt;&lt;br /&gt;As it turns out people work with text commands very well in a hierarchical fashion. Object-oriented programming is so favorable because having hundreds or thousands of commands on the first level (non-object oriented) such as array_push(array_name, item) are much harder to remember than array_name.push(item). Context.&lt;br /&gt;&lt;br /&gt;Context reduces memory load.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;However, in the visual arena, people work much better in a spatial fashion. The menu system of the iPhone is so favorable because it eliminates the need for context. Each app does one task well. No app does many tasks. No hierarchy is necessary. All desired functions are available at the top level. The app is available at the top level. Once the app is selected, all of it's functions are available at the top level, with few exceptions.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;The church would do well to have their websites follow these principles. directory.lds.org is easy to remember and would provide direct access to what is desired. People could get to where they wanted to go before even logging in. Instead it's something obscure that you get to through a bunch of menus.&lt;br /&gt;&lt;br /&gt;Spatial access through hierarchy... it doesn't work.&lt;br /&gt;&lt;br /&gt;It's also why alphabetizing countries is a bad idea. If you put the country which the browser believes the user is in as the first country and the rest alphabetized... better off with a map actually. If you have the screen real estate, use it. If you don't, create it. Layers are spatial. Menus are hierarchical.&lt;br /&gt;&lt;br /&gt;Use what works.&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5446962-3114417308474294658?l=coolaj86.blogspot.com' alt='' /&gt;&lt;/div&gt;</description><link>http://coolaj86.blogspot.com/2009_07_01_archive.html#3114417308474294658</link><author>noreply@blogger.com (CoolAJ86)</author></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-5446962.post-114165293523095420</guid><pubDate>Mon, 06 Mar 2006 13:38:00 +0000</pubDate><atom:updated>2007-12-23T10:44:49.698-07:00</atom:updated><title></title><description>What is this whole "on rails" things anyway? Ruby on rails. Ajax on rails. Other things on rails... whatever happened to wheels?&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5446962-114165293523095420?l=coolaj86.blogspot.com' alt='' /&gt;&lt;/div&gt;</description><link>http://coolaj86.blogspot.com/2006_03_01_archive.html#114165293523095420</link><author>noreply@blogger.com (CoolAJ86)</author></item></channel></rss>